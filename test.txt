npm install angular-oauth2-oidc

///Create a new service to handle authentication. For example, create a file auth.service.ts:
import { Injectable } from '@angular/core';
import { OAuthService, AuthConfig } from 'angular-oauth2-oidc';
import { JwksValidationHandler } from 'angular-oauth2-oidc-jwks';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  constructor(private oauthService: OAuthService) {
    this.configureOAuth();
  }

  private configureOAuth() {
    const authConfig: AuthConfig = {
      issuer: 'https://login.microsoftonline.com/common/v2.0',
      redirectUri: window.location.origin,
      clientId: 'YOUR_AZURE_CLIENT_ID',
      scope: 'openid profile email',
      responseType: 'code',
      oidc: true,
      strictDiscoveryDocumentValidation: false,
      showDebugInformation: true,
      jwks: 'https://login.microsoftonline.com/common/discovery/v2.0/keys',
    };

    this.oauthService.configure(authConfig);
    this.oauthService.tokenValidationHandler = new JwksValidationHandler();
    this.oauthService.loadDiscoveryDocumentAndTryLogin();
  }

  login(): void {
    this.oauthService.initLoginFlow();
  }

  logout(): void {
    this.oauthService.logOut();
  }

  get identityClaims() {
    return this.oauthService.getIdentityClaims();
  }

  get accessToken() {
    return this.oauthService.getAccessToken();
  }

  get isAuthenticated(): boolean {
    return this.oauthService.hasValidAccessToken();
  }
}






//b. Modify your app.module.ts to include OAuthService configuration

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { AuthService } from './auth.service';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule
  ],
  providers: [AuthService],
  bootstrap: [AppComponent]
})
export class AppModule { }





//In app-routing.module.ts:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { ProtectedComponent } from './protected/protected.component';
import { AuthGuard } from './auth.guard';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'protected', component: ProtectedComponent, canActivate: [AuthGuard] },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }









//Create the auth.guard.ts:
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (this.authService.isAuthenticated) {
      return true;
    } else {
      this.router.navigate(['/']);
      return false;
    }
  }
}







//In your component, you can inject the AuthService and use it to manage authentication:
import { Component } from '@angular/core';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  constructor(private authService: AuthService) {}

  login() {
    this.authService.login();
  }

  logout() {
    this.authService.logout();
  }

  get isAuthenticated() {
    return this.authService.isAuthenticated;
  }
}







//Make sure to set your environment variables in environment.ts:
export const environment = {
  production: false,
  azureClientId: 'YOUR_AZURE_CLIENT_ID',
  azureTenantId: 'YOUR_AZURE_TENANT_ID',
  redirectUri: 'http://localhost:4200',
};




import { OAuthService, AuthConfig } from 'angular-oauth2-oidc';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor(private oauthService: OAuthService, private http: HttpClient) {
    this.oauthService.configure(authConfig);
    this.oauthService.setStorage(sessionStorage);
  }

  async exchangeCodeForTokens(code: string): Promise<void> {
    const body = new HttpParams()
      .set('grant_type', 'authorization_code')
      .set('code', code)
      .set('redirect_uri', window.location.origin)
      .set('client_id', authConfig.clientId);

    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');

    try {
      const tokenResponse = await this.http.post<any>(authConfig.tokenEndpoint, body, { headers }).toPromise();
      this.oauthService.storeAccessTokenResponse(
        tokenResponse.access_token,
        tokenResponse.expires_in,
        tokenResponse.refresh_token,
        tokenResponse.scope,
        tokenResponse.id_token
      );
    } catch (error) {
      console.error('Error exchanging code for tokens', error);
      throw error;
    }
  }

  async fetchUserProfile(): Promise<any> {
    try {
      return await this.oauthService.loadUserProfile();
    } catch (error) {
      console.error('Error fetching user profile', error);
      throw error;
    }
  }
}



 async exchangeCodeForTokens(code: string): Promise<void> {
    const body = new HttpParams()
      .set('grant_type', 'authorization_code')
      .set('code', code)
      .set('redirect_uri', window.location.origin)
      .set('client_id', authConfig.clientId);

    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');

    try {
      const tokenResponse = await this.http.post<any>(authConfig.tokenEndpoint, body, { headers }).toPromise();
      
      // Process and store ID token
      this.oauthService.processIdToken(
        tokenResponse.id_token,
        tokenResponse.access_token,
        tokenResponse.expires_in,
        tokenResponse.scope,
        new Date().getTime() + tokenResponse.expires_in * 1000,
        ''
      );

      // Process and store access token
      this.oauthService.processAccessToken(
        tokenResponse.access_token,
        tokenResponse.expires_in,
        tokenResponse.scope,
        new Date().getTime() + tokenResponse.expires_in * 1000
      );

      if (tokenResponse.refresh_token) {
        this.oauthService.storeRefreshToken(tokenResponse.refresh_token);
      }
    } catch (error) {
      console.error('Error exchanging code for tokens', error);
      throw error;
    }
  }




















import { OAuthService } from 'angular-oauth2-oidc';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { authConfig } from './auth-config';  // Adjust the path as necessary

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor(private oauthService: OAuthService, private http: HttpClient) {
    this.oauthService.configure(authConfig);
    this.oauthService.setStorage(sessionStorage);
  }

  async exchangeCodeForTokens(code: string): Promise<void> {
    const body = new HttpParams()
      .set('grant_type', 'authorization_code')
      .set('code', code)
      .set('redirect_uri', window.location.origin)
      .set('client_id', authConfig.clientId);

    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');

    try {
      const tokenResponse = await this.http.post<any>(authConfig.tokenEndpoint, body, { headers }).toPromise();
      
      // Process and store tokens using OAuthService methods
      await this.oauthService.handleNewTokenResponse(tokenResponse);

    } catch (error) {
      console.error('Error exchanging code for tokens', error);
      throw error;
    }
  }

  async fetchUserProfile(): Promise<any> {
    try {
      return await this.oauthService.loadUserProfile();
    } catch (error) {
      console.error('Error fetching user profile', error);
      throw error;
    }
  }
}





import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { AuthService } from '../auth.service';  // Adjust the path as necessary

@Component({
  selector: 'app-auth-callback',
  template: '<p>Authenticating...</p>'
})
export class AuthCallbackComponent implements OnInit {
  constructor(private route: ActivatedRoute, private authService: AuthService) {}

  async ngOnInit() {
    this.route.queryParams.subscribe(async params => {
      const code = params['code'];
      if (code) {
        try {
          await this.authService.exchangeCodeForTokens(code);
          const userProfile = await this.authService.fetchUserProfile();
          console.log('User Profile:', userProfile);
        } catch (error) {
          console.error('Error during authentication process', error);
        }
      }
    });
  }
}

//---------------------------------------------------------



import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestResolver;
import org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter;
import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizationRequestResolver;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/oauth2/**", "/login/**").permitAll()
                .anyRequest().authenticated()
                .and()
            .oauth2Login()
                .defaultSuccessURL("/home", true);
    }
}





spring:
  security:
    oauth2:
      client:
        registration:
          cognito:
            client-id: your-client-id
            client-secret: your-client-secret
            scope: openid,profile,email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-name: Cognito
        provider:
          cognito:
            authorization-uri: https://{yourCognitoDomain}.auth.{region}.amazoncognito.com/oauth2/authorize
            token-uri: https://{yourCognitoDomain}.auth.{region}.amazoncognito.com/oauth2/token
            user-info-uri: https://{yourCognitoDomain}.auth.{region}.amazoncognito.com/oauth2/userInfo
            user-name-attribute: sub
			
	








import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;
import org.springframework.security.oauth2.core.OAuth2AccessToken;
import org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

@Controller
public class OAuth2Controller {

    @Value("${spring.security.oauth2.client.provider.cognito.token-uri}")
    private String tokenUri;

    @Value("${spring.security.oauth2.client.registration.cognito.client-id}")
    private String clientId;

    @Value("${spring.security.oauth2.client.registration.cognito.client-secret}")
    private String clientSecret;

    private final OAuth2AuthorizedClientService authorizedClientService;
    private final ClientRegistrationRepository clientRegistrationRepository;

    public OAuth2Controller(OAuth2AuthorizedClientService authorizedClientService, ClientRegistrationRepository clientRegistrationRepository) {
        this.authorizedClientService = authorizedClientService;
        this.clientRegistrationRepository = clientRegistrationRepository;
    }

    @GetMapping("/oauth2/token")
    public ResponseEntity<String> getToken(@RequestParam("code") String code) {
        ClientRegistration clientRegistration = clientRegistrationRepository.findByRegistrationId("cognito");
        RestTemplate restTemplate = new RestTemplate();
        
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_TYPE, "application/x-www-form-urlencoded");

        String body = "grant_type=authorization_code" +
                      "&code=" + code +
                      "&redirect_uri=" + clientRegistration.getRedirectUriTemplate() +
                      "&client_id=" + clientId +
                      "&client_secret=" + clientSecret;

        HttpEntity<String> requestEntity = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = restTemplate.exchange(tokenUri, HttpMethod.POST, requestEntity, String.class);

        return ResponseEntity.ok(response.getBody());
    }
}	
			
			
export class CodeVerifierService {
  getCodeVerifier(): string | null {
    const stateKey = Object.keys(sessionStorage).find(key => key.startsWith('PKCE_verifier'));
    if (stateKey) {
      return sessionStorage.getItem(stateKey);
    }
    return null;
  }
}
